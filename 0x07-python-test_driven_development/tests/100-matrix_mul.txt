>>> from matrix_multiplication import matrix_mul

# test case 1
m_a = [
    [1, 2],
    [3, 4],
]
m_b = m_a
print(matrix_mul(m_a, m_b))  # Output: [[7, 10], [15, 22]]

# test case 2
m_a = [[1, 2]]
m_b = [
    [3, 4],
    [5, 6]
]
print(matrix_mul(m_a, m_b))  # Output: [[13, 16]]

# test case 3
m_a = [
    [1.2, 5.5, 6.2],
    [4.66, 12.3, -9.2]
]
m_b = [
    [5.0, 3.3],
    [-2.9, 4.4],
    [7.2, 4.4]
]
print(matrix_mul(m_a, m_b))  # Output: [[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]

# test case 4
m_a = [
    [1, 2.2, 3.3, 4],
    [5, 6, 7, 8.8],
]
m_b = [
    [1.1, 2, 3.3],
    [4.0, 5.5, 6],
    [7, 8, 9],
    [10.01, 11, 12.3]
]
print(matrix_mul(m_a, m_b))  # Output: [[73.03999999999999, 84.5, 95.4], [166.58800000000002, 195.8, 223.74]]

# test case 5
try:
    matrix_mul()
except TypeError as e:
    print(str(e))  # Output: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

# test case 6
try:
    matrix_mul([], [[1, 2]])
except ValueError as e:
    print(str(e))  # Output: m_a can't be empty

# test case 7
try:
    matrix_mul([[1, 2]], [[]])
except ValueError as e:
    print(str(e))  # Output: m_b can't be empty

# test case 8
try:
    matrix_mul([[]], [])
except ValueError as e:
    print(str(e))  # Output: m_a can't be empty

# test case 9
try:
    matrix_mul("not a list", [[1, 2]])
except TypeError as e:
    print(str(e))  # Output: m_a must be a list

# test case 10
try:
    matrix_mul([[1, 2]], "also not a list")
except TypeError as e:
    print(str(e))  # Output: m_b must be a list

# test case 11
try:
    matrix_mul("not a list", "also not a list")
except TypeError as e:
    print(str(e))  # Output: m_a must be a list

# test case 12
try:
    matrix_mul(None, None)
except TypeError as e:
    print(str(e))  # Output: m_a must be a list

# test case 13
try:
    matrix_mul([1
